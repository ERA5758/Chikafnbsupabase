
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to get user's role and storeId from their own user document.
    // This is more secure and efficient than passing it from the client.
    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    // Default deny all access.
    match /{document=**} {
      allow read, write: if false;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Users can read their own data.
      allow get: if request.auth.uid == userId;

      // An admin can read data of any user belonging to their store.
      // A superadmin can read any user.
      allow list: if getUserData(request.auth.uid).role == 'superadmin' || 
                     (getUserData(request.auth.uid).role == 'admin' && 
                      resource.data.storeId == getUserData(request.auth.uid).storeId);
      
      // Users can update their own name/whatsapp, but not their role or status.
      allow update: if request.auth.uid == userId &&
                       request.resource.data.keys().hasOnly(['name', 'whatsapp']);
                       
      // Only admins/superadmins can create users (via Cloud Function) or change status.
      // Note: Direct creation/update is limited. Most logic should be in Cloud Functions.
      allow write: if getUserData(request.auth.uid).role == 'admin' || getUserData(request.auth.uid).role == 'superadmin';
    }

    // Rules for store-specific data
    match /stores/{storeId}/{document=**} {
        // A user can only access documents inside the store they belong to.
        // Superadmin has access to all stores.
        allow read, write: if getUserData(request.auth.uid).role == 'superadmin' || 
                              getUserData(request.auth.uid).storeId == storeId;
    }

    // Rules for the main 'stores' collection documents themselves
    match /stores/{storeId} {
        // Allow reading the main store document if the user belongs to it or is a superadmin.
        allow read: if getUserData(request.auth.uid).role == 'superadmin' ||
                      getUserData(request.auth.uid).storeId == storeId;
        
        // Allow updating token balance or settings, but only by an admin of that store or superadmin.
        allow update: if getUserData(request.auth.uid).role == 'superadmin' || 
                        (getUserData(request.auth.uid).role == 'admin' && getUserData(request.auth.uid).storeId == storeId);

        // Disallow client-side creation or deletion of stores. Should be done via a secure backend process.
        allow create, delete: if false;
    }

    // Rules for global settings that everyone can read but only superadmins can change.
    match /appSettings/{setting} {
      allow read: if request.auth != null;
      allow write: if getUserData(request.auth.uid).role == 'superadmin';
    }

    // Rules for global redemption options
    match /redemptionOptions/{optionId} {
        allow read: if request.auth != null;
        allow write: if getUserData(request.auth.uid).role == 'superadmin' || getUserData(request.auth.uid).role == 'admin';
    }

    // Rules for global pending orders
    match /pendingOrders/{orderId} {
        allow read, write: if request.auth != null; // Allow any authenticated user to create/read pending orders
    }
  }
}
