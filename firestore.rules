rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if the user belongs to a store
    function isUserOfStore(storeId) {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.storeId == storeId;
    }
    
    // Helper function to check if the user is an admin of a store
    function isAdminOfStore(storeId) {
      return isUserOfStore(storeId) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // USERS collection
    match /users/{userId} {
      // A user can read their own data.
      // An admin can read data of any user belonging to their store.
      allow read: if request.auth != null && 
                     (request.auth.uid == userId || isAdminOfStore(resource.data.storeId));
                     
      // A user can update their own data.
      allow update: if request.auth != null && request.auth.uid == userId;

      // Allow user creation during registration.
      allow create: if request.auth != null && request.auth.uid == userId;
    }

    // STORES collection
    match /stores/{storeId} {
      // Allow user creation (store document) during registration process.
      allow create: if request.auth != null && request.auth.uid == storeId;

      // An authenticated user can read the store document if they belong to that store.
      allow read: if request.auth != null && isUserOfStore(storeId);
      
      // Only admins of the store can update the store document (e.g., token balance, settings).
      allow update: if request.auth != null && isAdminOfStore(storeId);

      // Sub-collections within a store
      match /{collectionId}/{docId} {
        // Any user belonging to the store can read/write to its sub-collections.
        // This is a broad rule but ensures app functionality.
        allow read, write: if request.auth != null && isUserOfStore(storeId);
      }
    }
    
    // PENDING ORDERS collection (Global)
    match /pendingOrders/{orderId} {
        // Any authenticated user from a store can create a pending order.
        allow create: if request.auth != null && request.resource.data.storeId == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.storeId;
        
        // Users can only read pending orders for their own store.
        allow read: if request.auth != null && isUserOfStore(resource.data.storeId);

        // Only admins can delete pending orders for their store.
        allow delete: if request.auth != null && isAdminOfStore(resource.data.storeId);
    }
    
    // GLOBAL APP SETTINGS
    match /appSettings/{settingId} {
        // Any authenticated user can read app settings.
        allow read: if request.auth != null;
        // Write access can be restricted to a superadmin role in the future if needed.
        allow write: if request.auth != null; // Kept open for now for easier management from console/app
    }
    
    // GLOBAL REDEMPTION OPTIONS
    match /redemptionOptions/{optionId} {
        // Any authenticated user can read the redemption options.
        allow read: if request.auth != null;
        // Only admins can create, update, or delete redemption options.
        allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
  }
}
