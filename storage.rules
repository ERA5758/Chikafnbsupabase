rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
  
    // Helper function to get user data from Firestore
    function getUserData() {
      return get(/databases/(default)/documents/users/$(request.auth.uid)).data;
    }

    // By default, deny all reads and writes
    match /{allPaths=**} {
      allow read, write: if false;
    }

    // --- Product Images ---
    // The path is structured as: products/{storeId}/{fileName}
    match /products/{storeId}/{allPaths=**} {
      
      // READ: Anyone who is authenticated can view product images.
      // This is generally safe and needed for the app to display images to any logged-in user.
      allow read: if request.auth != null;

      // WRITE (create, update, delete): 
      // Only allow if the user is an admin or superadmin, and their storeId matches the {storeId} in the path.
      // This prevents an admin from one store from modifying images of another store.
      allow write: if request.auth != null &&
                    (getUserData().role == 'superadmin' || 
                     (getUserData().role == 'admin' && getUserData().storeId == storeId));
    }
    
    // --- Top-Up Proofs ---
    // The path is structured as: top-up-proofs/{storeId}/{fileName}
    match /top-up-proofs/{storeId}/{allPaths=**} {
        // Any authenticated user belonging to the store can upload a proof.
        allow create: if request.auth != null && getUserData().storeId == storeId;
        
        // Only superadmins can read/delete proofs for verification.
        allow read, delete: if request.auth != null && getUserData().role == 'superadmin';
    }
  }
}
